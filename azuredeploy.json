{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourcePrefix": {
      "type": "string",
      "maxLength": 10,
      "metadata": {
        "description": "Prefix for all resources (max 10 characters)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Azure region for deployment"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "test",
        "prod"
      ],
      "metadata": {
        "description": "Environment type"
      }
    },
    "domainJoinOption": {
      "type": "string",
      "defaultValue": "AzureAD",
      "allowedValues": [
        "AzureAD",
        "DomainServices"
      ],
      "metadata": {
        "description": "Join type: AzureAD (cloud-native) or DomainServices (traditional AD)"
      }
    },
    "domainFqdn": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Domain FQDN (required for DomainServices join, e.g., contoso.com)"
      }
    },
    "domainJoinUsername": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Domain join account username (required for DomainServices join)"
      }
    },
    "domainJoinPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Domain join account password (required for DomainServices join)"
      }
    },
    "ouPath": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "OU path for domain join (optional, e.g., OU=AVD,DC=contoso,DC=com)"
      }
    },
    "useExistingVnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use an existing virtual network? If false, a new VNet will be created."
      }
    },
    "existingVnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of existing virtual network (required if useExistingVnet is true)"
      }
    },
    "existingVnetResourceGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Resource group of existing virtual network (required if useExistingVnet is true)"
      }
    },
    "createNewSubnet": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create a new subnet? If false and using existing VNet, you must specify existingSubnetName."
      }
    },
    "existingSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of existing subnet (required if useExistingVnet is true and createNewSubnet is false)"
      }
    },
    "vnetAddressSpace": {
      "type": "string",
      "defaultValue": "10.0.0.0/16",
      "metadata": {
        "description": "Virtual network address space (used only when creating new VNet)"
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.0.1.0/24",
      "metadata": {
        "description": "Subnet address prefix for AVD (used when creating new VNet or new subnet in existing VNet)"
      }
    },
    "sessionHostCount": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 100,
      "metadata": {
        "description": "Number of session hosts to deploy"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v5",
      "allowedValues": [
        "Standard_D2s_v5",
        "Standard_D4s_v5",
        "Standard_D8s_v5",
        "Standard_D16s_v5",
        "Standard_E4s_v5",
        "Standard_E8s_v5"
      ],
      "metadata": {
        "description": "Size of the session host VMs"
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "avdadmin",
      "metadata": {
        "description": "Admin username for session hosts"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password for session hosts"
      }
    },
    "hostPoolType": {
      "type": "string",
      "defaultValue": "Pooled",
      "allowedValues": [
        "Pooled",
        "Personal"
      ],
      "metadata": {
        "description": "Type of host pool"
      }
    },
    "loadBalancerType": {
      "type": "string",
      "defaultValue": "BreadthFirst",
      "allowedValues": [
        "BreadthFirst",
        "DepthFirst"
      ],
      "metadata": {
        "description": "Load balancing algorithm"
      }
    },
    "enableBackup": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Backup for session hosts"
      }
    },
    "backupRetentionDays": {
      "type": "int",
      "defaultValue": 30,
      "minValue": 7,
      "maxValue": 9999,
      "metadata": {
        "description": "Number of daily backups to retain"
      }
    },
    "enableImageGallery": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Shared Image Gallery for golden images"
      }
    },
    "enablePolicies": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Azure Policy for governance and compliance"
      }
    },
    "policyAllowedVmSizes": {
      "type": "array",
      "defaultValue": [
        "Standard_D2s_v5",
        "Standard_D4s_v5",
        "Standard_D8s_v5",
        "Standard_D16s_v5"
      ],
      "metadata": {
        "description": "Allowed VM sizes when policies are enabled"
      }
    }
  },
  "variables": {
    "vnetName": "[if(parameters('useExistingVnet'), parameters('existingVnetName'), concat(parameters('resourcePrefix'), '-', parameters('environment'), '-vnet'))]",
    "subnetName": "[if(and(parameters('useExistingVnet'), not(parameters('createNewSubnet'))), parameters('existingSubnetName'), concat(parameters('resourcePrefix'), '-', parameters('environment'), '-subnet'))]",
    "nsgName": "[concat(parameters('resourcePrefix'), '-', parameters('environment'), '-nsg')]",
    "hostPoolName": "[concat(parameters('resourcePrefix'), '-', parameters('environment'), '-hostpool')]",
    "workspaceName": "[concat(parameters('resourcePrefix'), '-', parameters('environment'), '-workspace')]",
    "appGroupName": "[concat(parameters('resourcePrefix'), '-', parameters('environment'), '-appgroup')]",
    "logAnalyticsName": "[concat(parameters('resourcePrefix'), '-', parameters('environment'), '-law')]",
    "storageAccountName": "[concat(toLower(replace(parameters('resourcePrefix'), '-', '')), toLower(parameters('environment')), uniqueString(resourceGroup().id))]",
    "keyVaultName": "[concat(parameters('resourcePrefix'), '-', parameters('environment'), '-kv-', uniqueString(resourceGroup().id))]",
    "vnetResourceGroup": "[if(parameters('useExistingVnet'), parameters('existingVnetResourceGroup'), resourceGroup().name)]",
    "subnetId": "[if(parameters('useExistingVnet'), resourceId(variables('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName')), resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName')))]",
    "isAzureADJoin": "[equals(parameters('domainJoinOption'), 'AzureAD')]",
    "isDomainJoin": "[equals(parameters('domainJoinOption'), 'DomainServices')]",
    "recoveryVaultName": "[concat(parameters('resourcePrefix'), '-', parameters('environment'), '-rsv')]",
    "backupPolicyName": "[concat(parameters('resourcePrefix'), '-backup-policy')]",
    "imageGalleryName": "[concat(replace(parameters('resourcePrefix'), '-', '_'), '_', parameters('environment'), '_sig')]",
    "win11ImageDefinition": "win11-multisession-avd"
  },
  "resources": [
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowRDP",
            "properties": {
              "priority": 100,
              "protocol": "Tcp",
              "access": "Allow",
              "direction": "Inbound",
              "sourceAddressPrefix": "VirtualNetwork",
              "sourcePortRange": "*",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "3389"
            }
          }
        ]
      }
    },
    {
      "condition": "[not(parameters('useExistingVnet'))]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2023-04-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetAddressSpace')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetAddressPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "condition": "[and(parameters('useExistingVnet'), parameters('createNewSubnet'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "addSubnetToExistingVnet",
      "resourceGroup": "[variables('vnetResourceGroup')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2023-04-01",
              "name": "[concat(variables('vnetName'), '/', variables('subnetName'))]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefix')]",
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 90
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Premium_LRS"
      },
      "kind": "FileStorage",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
      "apiVersion": "2023-01-01",
      "name": "[concat(variables('storageAccountName'), '/default/profiles')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "shareQuota": 1024
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-02-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultName'), '/admin-password')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('adminPassword')]"
      }
    },
    {
      "type": "Microsoft.DesktopVirtualization/hostpools",
      "apiVersion": "2023-09-05",
      "name": "[variables('hostPoolName')]",
      "location": "[parameters('location')]",
      "properties": {
        "hostPoolType": "[parameters('hostPoolType')]",
        "loadBalancerType": "[parameters('loadBalancerType')]",
        "preferredAppGroupType": "Desktop",
        "maxSessionLimit": 16,
        "startVMOnConnect": true,
        "validationEnvironment": false
      }
    },
    {
      "type": "Microsoft.DesktopVirtualization/applicationgroups",
      "apiVersion": "2023-09-05",
      "name": "[variables('appGroupName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.DesktopVirtualization/hostpools', variables('hostPoolName'))]"
      ],
      "properties": {
        "hostPoolArmPath": "[resourceId('Microsoft.DesktopVirtualization/hostpools', variables('hostPoolName'))]",
        "applicationGroupType": "Desktop",
        "friendlyName": "Desktop Application Group"
      }
    },
    {
      "type": "Microsoft.DesktopVirtualization/workspaces",
      "apiVersion": "2023-09-05",
      "name": "[variables('workspaceName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.DesktopVirtualization/applicationgroups', variables('appGroupName'))]"
      ],
      "properties": {
        "applicationGroupReferences": [
          "[resourceId('Microsoft.DesktopVirtualization/applicationgroups', variables('appGroupName'))]"
        ],
        "friendlyName": "[concat(parameters('resourcePrefix'), ' AVD Workspace')]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2023-04-01",
      "name": "[concat(variables('hostPoolName'), '-nic-', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "nicCopy",
        "count": "[parameters('sessionHostCount')]"
      },
      "dependsOn": [
        "[if(not(parameters('useExistingVnet')), resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), if(parameters('createNewSubnet'), resourceId(variables('vnetResourceGroup'), 'Microsoft.Resources/deployments', 'addSubnetToExistingVnet'), 'none'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "subnet": {
                "id": "[variables('subnetId')]"
              },
              "privateIPAllocationMethod": "Dynamic"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2023-03-01",
      "name": "[concat(variables('hostPoolName'), '-', copyIndex())]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "vmCopy",
        "count": "[parameters('sessionHostCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('hostPoolName'), '-nic-', copyIndex()))]",
        "[resourceId('Microsoft.DesktopVirtualization/hostpools', variables('hostPoolName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('resourcePrefix'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "microsoftwindowsdesktop",
            "offer": "windows-11",
            "sku": "win11-23h2-avd",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('hostPoolName'), '-nic-', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[variables('isAzureADJoin')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-03-01",
      "name": "[concat(variables('hostPoolName'), '-', copyIndex(), '/AADLoginForWindows')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "aadExtensionCopy",
        "count": "[parameters('sessionHostCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('hostPoolName'), '-', copyIndex()))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.ActiveDirectory",
        "type": "AADLoginForWindows",
        "typeHandlerVersion": "1.0",
        "autoUpgradeMinorVersion": true
      }
    },
    {
      "condition": "[variables('isDomainJoin')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-03-01",
      "name": "[concat(variables('hostPoolName'), '-', copyIndex(), '/joindomain')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "domainJoinExtensionCopy",
        "count": "[parameters('sessionHostCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('hostPoolName'), '-', copyIndex()))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "name": "[parameters('domainFqdn')]",
          "ouPath": "[parameters('ouPath')]",
          "user": "[concat(parameters('domainFqdn'), '\\', parameters('domainJoinUsername'))]",
          "restart": true,
          "options": "3"
        },
        "protectedSettings": {
          "password": "[parameters('domainJoinPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2023-03-01",
      "name": "[concat(variables('hostPoolName'), '-', copyIndex(), '/dscextension')]",
      "location": "[parameters('location')]",
      "copy": {
        "name": "dscExtensionCopy",
        "count": "[parameters('sessionHostCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('hostPoolName'), '-', copyIndex()), if(variables('isAzureADJoin'), 'AADLoginForWindows', 'joindomain'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.73",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "modulesUrl": "https://wvdportalstorageblob.blob.core.windows.net/galleryartifacts/Configuration_09-08-2022.zip",
          "configurationFunction": "Configuration.ps1\\AddSessionHost",
          "properties": {
            "hostPoolName": "[variables('hostPoolName')]",
            "registrationInfoToken": "[reference(resourceId('Microsoft.DesktopVirtualization/hostpools', variables('hostPoolName'))).registrationInfo.token]",
            "aadJoin": "[variables('isAzureADJoin')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('enableBackup')]",
      "type": "Microsoft.RecoveryServices/vaults",
      "apiVersion": "2023-01-01",
      "name": "[variables('recoveryVaultName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicNetworkAccess": "Enabled"
      }
    },
    {
      "condition": "[parameters('enableBackup')]",
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "apiVersion": "2023-01-01",
      "name": "[concat(variables('recoveryVaultName'), '/', variables('backupPolicyName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoveryVaultName'))]"
      ],
      "properties": {
        "backupManagementType": "AzureIaasVM",
        "schedulePolicy": {
          "scheduleRunFrequency": "Daily",
          "scheduleRunTimes": [
            "2023-01-01T02:00:00Z"
          ],
          "schedulePolicyType": "SimpleSchedulePolicy"
        },
        "retentionPolicy": {
          "retentionPolicyType": "LongTermRetentionPolicy",
          "dailySchedule": {
            "retentionTimes": [
              "2023-01-01T02:00:00Z"
            ],
            "retentionDuration": {
              "count": "[parameters('backupRetentionDays')]",
              "durationType": "Days"
            }
          }
        },
        "timeZone": "UTC",
        "instantRpRetentionRangeInDays": 2
      }
    },
    {
      "condition": "[parameters('enableBackup')]",
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "apiVersion": "2023-01-01",
      "name": "[concat(variables('recoveryVaultName'), '/Azure/iaasvmcontainer;iaasvmcontainerv2;', resourceGroup().name, ';', variables('hostPoolName'), '-', copyIndex(), '/vm;iaasvmcontainerv2;', resourceGroup().name, ';', variables('hostPoolName'), '-', copyIndex())]",
      "copy": {
        "name": "backupCopy",
        "count": "[parameters('vmCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('recoveryVaultName'), variables('backupPolicyName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('hostPoolName'), '-', copyIndex()))]"
      ],
      "properties": {
        "protectedItemType": "Microsoft.Compute/virtualMachines",
        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', variables('recoveryVaultName'), variables('backupPolicyName'))]",
        "sourceResourceId": "[resourceId('Microsoft.Compute/virtualMachines', concat(variables('hostPoolName'), '-', copyIndex()))]"
      }
    },
    {
      "condition": "[parameters('enableImageGallery')]",
      "type": "Microsoft.Compute/galleries",
      "apiVersion": "2022-03-03",
      "name": "[variables('imageGalleryName')]",
      "location": "[parameters('location')]",
      "properties": {
        "description": "Azure Virtual Desktop Golden Images"
      }
    },
    {
      "condition": "[parameters('enableImageGallery')]",
      "type": "Microsoft.Compute/galleries/images",
      "apiVersion": "2022-03-03",
      "name": "[concat(variables('imageGalleryName'), '/', variables('win11ImageDefinition'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/galleries', variables('imageGalleryName'))]"
      ],
      "properties": {
        "osType": "Windows",
        "osState": "Generalized",
        "hyperVGeneration": "V2",
        "identifier": {
          "publisher": "MicrosoftWindowsDesktop",
          "offer": "Windows-11",
          "sku": "win11-22h2-avd"
        },
        "recommended": {
          "vCPUs": {
            "min": 2,
            "max": 32
          },
          "memory": {
            "min": 4,
            "max": 128
          }
        }
      }
    },
    {
      "condition": "[parameters('enablePolicies')]",
      "type": "Microsoft.Authorization/policyAssignments",
      "apiVersion": "2022-06-01",
      "name": "require-managed-disks",
      "properties": {
        "displayName": "AVD - Require Managed Disks",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/06a78e20-9358-41c9-923c-fb736d382a4d",
        "scope": "[resourceGroup().id]",
        "description": "Ensure all VMs use managed disks"
      }
    },
    {
      "condition": "[parameters('enablePolicies')]",
      "type": "Microsoft.Authorization/policyAssignments",
      "apiVersion": "2022-06-01",
      "name": "allowed-vm-sizes",
      "properties": {
        "displayName": "AVD - Allowed VM Sizes",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/cccc23c7-8427-4f53-ad12-b6a63eb452b3",
        "scope": "[resourceGroup().id]",
        "description": "Restrict VM sizes to approved list",
        "parameters": {
          "listOfAllowedSKUs": {
            "value": "[parameters('policyAllowedVmSizes')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('enablePolicies')]",
      "type": "Microsoft.Authorization/policyAssignments",
      "apiVersion": "2022-06-01",
      "name": "require-environment-tag",
      "properties": {
        "displayName": "AVD - Require Environment Tag",
        "policyDefinitionId": "/providers/Microsoft.Authorization/policyDefinitions/871b6d14-10aa-478d-b590-94f262ecfa99",
        "scope": "[resourceGroup().id]",
        "description": "Require Environment tag on all resources",
        "parameters": {
          "tagName": {
            "value": "Environment"
          }
        }
      }
    }
  ],
  "outputs": {
    "workspaceUrl": {
      "type": "string",
      "value": "[concat('https://client.wvd.microsoft.com/arm/webclient/index.html')]"
    },
    "hostPoolName": {
      "type": "string",
      "value": "[variables('hostPoolName')]"
    },
    "workspaceName": {
      "type": "string",
      "value": "[variables('workspaceName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "vnetName": {
      "type": "string",
      "value": "[variables('vnetName')]"
    },
    "subnetName": {
      "type": "string",
      "value": "[variables('subnetName')]"
    },
    "deploymentType": {
      "type": "string",
      "value": "[if(parameters('useExistingVnet'), if(parameters('createNewSubnet'), 'Existing VNet, New Subnet', 'Existing VNet, Existing Subnet'), 'New VNet and Subnet')]"
    },
    "joinType": {
      "type": "string",
      "value": "[parameters('domainJoinOption')]"
    },
    "backupEnabled": {
      "type": "bool",
      "value": "[parameters('enableBackup')]"
    },
    "recoveryVaultName": {
      "type": "string",
      "value": "[if(parameters('enableBackup'), variables('recoveryVaultName'), 'Not deployed')]"
    },
    "imageGalleryEnabled": {
      "type": "bool",
      "value": "[parameters('enableImageGallery')]"
    },
    "imageGalleryName": {
      "type": "string",
      "value": "[if(parameters('enableImageGallery'), variables('imageGalleryName'), 'Not deployed')]"
    },
    "policiesEnabled": {
      "type": "bool",
      "value": "[parameters('enablePolicies')]"
    }
  }
}
